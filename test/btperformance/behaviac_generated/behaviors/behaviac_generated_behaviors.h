// ---------------------------------------------------------------------
// THIS FILE IS AUTO-GENERATED BY BEHAVIAC DESIGNER, SO PLEASE DON'T MODIFY IT BY YOURSELF!
// ---------------------------------------------------------------------

#ifndef _BEHAVIAC_GENERATED_BEHAVIORS_H_
#define _BEHAVIAC_GENERATED_BEHAVIORS_H_

#include "../types/behaviac_types.h"

namespace behaviac
{
	// Source file: performance/Performance

	class DecoratorLoop_bt_performance_Performance_node1 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_performance_Performance_node1, DecoratorLoop);
		DecoratorLoop_bt_performance_Performance_node1()
		{
			m_bDecorateWhenChildEnds = true;
			m_bDoneWithinFrame = false;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 10;
		}
	};

	class Condition_bt_performance_Performance_node5 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_performance_Performance_node5, Condition);
		Condition_bt_performance_Performance_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			float& opl = ((CPerformanceAgent*)pAgent)->DistanceToEnemy;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_SmallDisance") == 4142645218u);
			float& opr = (float&)pAgent->GetVariable<float >(4142645218u);
			bool op = PrivateDetails::LessEqual(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_performance_Performance_node6 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_performance_Performance_node6, Condition);
		Condition_bt_performance_Performance_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			float& opl = ((CPerformanceAgent*)pAgent)->HP;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_HealthThreshold") == 1146605254u);
			float& opr = (float&)pAgent->GetVariable<float >(1146605254u);
			bool op = PrivateDetails::LessEqual(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_performance_Performance_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_performance_Performance_node7, Action);
		Action_bt_performance_Performance_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((CPerformanceAgent*)pAgent)->RunAway();
			return result;
		}
	};

	class Precondition_bt_performance_Performance_attach3 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_performance_Performance_attach3, Precondition);
		Precondition_bt_performance_Performance_attach3()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			float& opl = ((CPerformanceAgent*)pAgent)->DistanceToEnemy;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_BigDistance") == 1778440178u);
			float& opr2 = (float&)pAgent->GetVariable<float >(1778440178u);
			bool op = PrivateDetails::Greater(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Action_bt_performance_Performance_node19 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_performance_Performance_node19, Action);
		Action_bt_performance_Performance_node19()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((CPerformanceAgent*)pAgent)->Fire();
			return BT_SUCCESS;
		}
	};

	class Parallel_bt_performance_Performance_node22 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_performance_Performance_node22, Parallel);
		Parallel_bt_performance_Performance_node22()
		{
			m_failPolicy = FAIL_ON_ONE;
			m_succeedPolicy = SUCCEED_ON_ALL;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_LOOP;
		}
	protected:
	};

	class Condition_bt_performance_Performance_node16 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_performance_Performance_node16, Condition);
		Condition_bt_performance_Performance_node16()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			float& opl = ((CPerformanceAgent*)pAgent)->DistanceToEnemy;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_SmallDisance") == 4142645218u);
			float& opr = (float&)pAgent->GetVariable<float >(4142645218u);
			bool op = PrivateDetails::Greater(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_performance_Performance_node9 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_performance_Performance_node9, Condition);
		Condition_bt_performance_Performance_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			float& opl = ((CPerformanceAgent*)pAgent)->Hungry;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_HungryThreshold") == 825091127u);
			float& opr = (float&)pAgent->GetVariable<float >(825091127u);
			bool op = PrivateDetails::GreaterEqual(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_performance_Performance_node13 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_performance_Performance_node13, Condition);
		Condition_bt_performance_Performance_node13()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			float& opl = ((CPerformanceAgent*)pAgent)->Food;
			float opr = 0;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_performance_Performance_node14 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_performance_Performance_node14, Action);
		Action_bt_performance_Performance_node14()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((CPerformanceAgent*)pAgent)->SearchForFood();
			return result;
		}
	};

	class Action_bt_performance_Performance_node15 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_performance_Performance_node15, Action);
		Action_bt_performance_Performance_node15()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((CPerformanceAgent*)pAgent)->Eat();
			return result;
		}
	};

	class Parallel_bt_performance_Performance_node20 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_performance_Performance_node20, Parallel);
		Parallel_bt_performance_Performance_node20()
		{
			m_failPolicy = FAIL_ON_ONE;
			m_succeedPolicy = SUCCEED_ON_ALL;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_LOOP;
		}
	protected:
	};

	class Condition_bt_performance_Performance_node8 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_performance_Performance_node8, Condition);
		Condition_bt_performance_Performance_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			float& opl = ((CPerformanceAgent*)pAgent)->DistanceToEnemy;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_SmallDisance") == 4142645218u);
			float& opr = (float&)pAgent->GetVariable<float >(4142645218u);
			bool op = PrivateDetails::Greater(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_performance_Performance_node18 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_performance_Performance_node18, Action);
		Action_bt_performance_Performance_node18()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((CPerformanceAgent*)pAgent)->Wander();
			return result;
		}
	};

	class Action_bt_performance_Performance_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_performance_Performance_node4, Action);
		Action_bt_performance_Performance_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((CPerformanceAgent*)pAgent)->Fidget();
			return result;
		}
	};

	class bt_performance_Performance
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("performance/Performance");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("CPerformanceAgent");
#endif
			// locals
			pBT->AddLocal("CPerformanceAgent", "float", "par_HungryThreshold", "60");
			pBT->AddLocal("CPerformanceAgent", "float", "par_BigDistance", "30");
			pBT->AddLocal("CPerformanceAgent", "float", "par_SmallDisance", "10");
			pBT->AddLocal("CPerformanceAgent", "float", "par_HealthThreshold", "20");
			// children
			{
				DecoratorLoop_bt_performance_Performance_node1* node1 = BEHAVIAC_NEW DecoratorLoop_bt_performance_Performance_node1;
				node1->SetClassNameString("DecoratorLoop");
				node1->SetId(1);
#if !BEHAVIAC_RELEASE
				node1->SetAgentType("CPerformanceAgent");
#endif
				pBT->AddChild(node1);
				{
					Selector* node21 = BEHAVIAC_NEW Selector;
					node21->SetClassNameString("Selector");
					node21->SetId(21);
#if !BEHAVIAC_RELEASE
					node21->SetAgentType("CPerformanceAgent");
#endif
					node1->AddChild(node21);
					{
						Sequence* node0 = BEHAVIAC_NEW Sequence;
						node0->SetClassNameString("Sequence");
						node0->SetId(0);
#if !BEHAVIAC_RELEASE
						node0->SetAgentType("CPerformanceAgent");
#endif
						node21->AddChild(node0);
						{
							Condition_bt_performance_Performance_node5* node5 = BEHAVIAC_NEW Condition_bt_performance_Performance_node5;
							node5->SetClassNameString("Condition");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("CPerformanceAgent");
#endif
							node0->AddChild(node5);
							node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
						}
						{
							Selector* node11 = BEHAVIAC_NEW Selector;
							node11->SetClassNameString("Selector");
							node11->SetId(11);
#if !BEHAVIAC_RELEASE
							node11->SetAgentType("CPerformanceAgent");
#endif
							node0->AddChild(node11);
							{
								Sequence* node2 = BEHAVIAC_NEW Sequence;
								node2->SetClassNameString("Sequence");
								node2->SetId(2);
#if !BEHAVIAC_RELEASE
								node2->SetAgentType("CPerformanceAgent");
#endif
								node11->AddChild(node2);
								{
									Condition_bt_performance_Performance_node6* node6 = BEHAVIAC_NEW Condition_bt_performance_Performance_node6;
									node6->SetClassNameString("Condition");
									node6->SetId(6);
#if !BEHAVIAC_RELEASE
									node6->SetAgentType("CPerformanceAgent");
#endif
									node2->AddChild(node6);
									node2->SetHasEvents(node2->HasEvents() | node6->HasEvents());
								}
								{
									Action_bt_performance_Performance_node7* node7 = BEHAVIAC_NEW Action_bt_performance_Performance_node7;
									node7->SetClassNameString("Action");
									node7->SetId(7);
#if !BEHAVIAC_RELEASE
									node7->SetAgentType("CPerformanceAgent");
#endif
									// attachments
									{
										Precondition_bt_performance_Performance_attach3* attach3 = BEHAVIAC_NEW Precondition_bt_performance_Performance_attach3;
										attach3->SetClassNameString("Precondition");
										attach3->SetId(3);
#if !BEHAVIAC_RELEASE
										attach3->SetAgentType("CPerformanceAgent");
#endif
										node7->Attach(attach3, true, false, false);
										node7->SetHasEvents(node7->HasEvents() | (Event::DynamicCast(attach3) != 0));
									}
									node2->AddChild(node7);
									node2->SetHasEvents(node2->HasEvents() | node7->HasEvents());
								}
								node11->SetHasEvents(node11->HasEvents() | node2->HasEvents());
							}
							{
								Action_bt_performance_Performance_node19* node19 = BEHAVIAC_NEW Action_bt_performance_Performance_node19;
								node19->SetClassNameString("Action");
								node19->SetId(19);
#if !BEHAVIAC_RELEASE
								node19->SetAgentType("CPerformanceAgent");
#endif
								node11->AddChild(node19);
								node11->SetHasEvents(node11->HasEvents() | node19->HasEvents());
							}
							node0->SetHasEvents(node0->HasEvents() | node11->HasEvents());
						}
						node21->SetHasEvents(node21->HasEvents() | node0->HasEvents());
					}
					{
						Parallel_bt_performance_Performance_node22* node22 = BEHAVIAC_NEW Parallel_bt_performance_Performance_node22;
						node22->SetClassNameString("Parallel");
						node22->SetId(22);
#if !BEHAVIAC_RELEASE
						node22->SetAgentType("CPerformanceAgent");
#endif
						node21->AddChild(node22);
						{
							Condition_bt_performance_Performance_node16* node16 = BEHAVIAC_NEW Condition_bt_performance_Performance_node16;
							node16->SetClassNameString("Condition");
							node16->SetId(16);
#if !BEHAVIAC_RELEASE
							node16->SetAgentType("CPerformanceAgent");
#endif
							node22->AddChild(node16);
							node22->SetHasEvents(node22->HasEvents() | node16->HasEvents());
						}
						{
							Sequence* node23 = BEHAVIAC_NEW Sequence;
							node23->SetClassNameString("Sequence");
							node23->SetId(23);
#if !BEHAVIAC_RELEASE
							node23->SetAgentType("CPerformanceAgent");
#endif
							node22->AddChild(node23);
							{
								Condition_bt_performance_Performance_node9* node9 = BEHAVIAC_NEW Condition_bt_performance_Performance_node9;
								node9->SetClassNameString("Condition");
								node9->SetId(9);
#if !BEHAVIAC_RELEASE
								node9->SetAgentType("CPerformanceAgent");
#endif
								node23->AddChild(node9);
								node23->SetHasEvents(node23->HasEvents() | node9->HasEvents());
							}
							{
								Selector* node10 = BEHAVIAC_NEW Selector;
								node10->SetClassNameString("Selector");
								node10->SetId(10);
#if !BEHAVIAC_RELEASE
								node10->SetAgentType("CPerformanceAgent");
#endif
								node23->AddChild(node10);
								{
									Sequence* node12 = BEHAVIAC_NEW Sequence;
									node12->SetClassNameString("Sequence");
									node12->SetId(12);
#if !BEHAVIAC_RELEASE
									node12->SetAgentType("CPerformanceAgent");
#endif
									node10->AddChild(node12);
									{
										Condition_bt_performance_Performance_node13* node13 = BEHAVIAC_NEW Condition_bt_performance_Performance_node13;
										node13->SetClassNameString("Condition");
										node13->SetId(13);
#if !BEHAVIAC_RELEASE
										node13->SetAgentType("CPerformanceAgent");
#endif
										node12->AddChild(node13);
										node12->SetHasEvents(node12->HasEvents() | node13->HasEvents());
									}
									{
										Action_bt_performance_Performance_node14* node14 = BEHAVIAC_NEW Action_bt_performance_Performance_node14;
										node14->SetClassNameString("Action");
										node14->SetId(14);
#if !BEHAVIAC_RELEASE
										node14->SetAgentType("CPerformanceAgent");
#endif
										node12->AddChild(node14);
										node12->SetHasEvents(node12->HasEvents() | node14->HasEvents());
									}
									node10->SetHasEvents(node10->HasEvents() | node12->HasEvents());
								}
								{
									Action_bt_performance_Performance_node15* node15 = BEHAVIAC_NEW Action_bt_performance_Performance_node15;
									node15->SetClassNameString("Action");
									node15->SetId(15);
#if !BEHAVIAC_RELEASE
									node15->SetAgentType("CPerformanceAgent");
#endif
									node10->AddChild(node15);
									node10->SetHasEvents(node10->HasEvents() | node15->HasEvents());
								}
								node23->SetHasEvents(node23->HasEvents() | node10->HasEvents());
							}
							node22->SetHasEvents(node22->HasEvents() | node23->HasEvents());
						}
						node21->SetHasEvents(node21->HasEvents() | node22->HasEvents());
					}
					{
						Parallel_bt_performance_Performance_node20* node20 = BEHAVIAC_NEW Parallel_bt_performance_Performance_node20;
						node20->SetClassNameString("Parallel");
						node20->SetId(20);
#if !BEHAVIAC_RELEASE
						node20->SetAgentType("CPerformanceAgent");
#endif
						node21->AddChild(node20);
						{
							Condition_bt_performance_Performance_node8* node8 = BEHAVIAC_NEW Condition_bt_performance_Performance_node8;
							node8->SetClassNameString("Condition");
							node8->SetId(8);
#if !BEHAVIAC_RELEASE
							node8->SetAgentType("CPerformanceAgent");
#endif
							node20->AddChild(node8);
							node20->SetHasEvents(node20->HasEvents() | node8->HasEvents());
						}
						{
							Sequence* node17 = BEHAVIAC_NEW Sequence;
							node17->SetClassNameString("Sequence");
							node17->SetId(17);
#if !BEHAVIAC_RELEASE
							node17->SetAgentType("CPerformanceAgent");
#endif
							node20->AddChild(node17);
							{
								Action_bt_performance_Performance_node18* node18 = BEHAVIAC_NEW Action_bt_performance_Performance_node18;
								node18->SetClassNameString("Action");
								node18->SetId(18);
#if !BEHAVIAC_RELEASE
								node18->SetAgentType("CPerformanceAgent");
#endif
								node17->AddChild(node18);
								node17->SetHasEvents(node17->HasEvents() | node18->HasEvents());
							}
							{
								Action_bt_performance_Performance_node4* node4 = BEHAVIAC_NEW Action_bt_performance_Performance_node4;
								node4->SetClassNameString("Action");
								node4->SetId(4);
#if !BEHAVIAC_RELEASE
								node4->SetAgentType("CPerformanceAgent");
#endif
								node17->AddChild(node4);
								node17->SetHasEvents(node17->HasEvents() | node4->HasEvents());
							}
							node20->SetHasEvents(node20->HasEvents() | node17->HasEvents());
						}
						node21->SetHasEvents(node21->HasEvents() | node20->HasEvents());
					}
					node1->SetHasEvents(node1->HasEvents() | node21->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node1->HasEvents());
			}
			return true;
		}
	};

}
#endif // _BEHAVIAC_GENERATED_BEHAVIORS_H_
