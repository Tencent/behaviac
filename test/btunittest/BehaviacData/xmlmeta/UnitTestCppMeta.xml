<metas version="5" language="cpp">
	<types>
		<enumtype Type="behaviac::EBTStatus" DisplayName="BT状态" Desc="BT状态">
			<enum NativeValue="behaviac::BT_INVALID" Value="BT_INVALID" DisplayName="" Desc="" />
			<enum NativeValue="behaviac::BT_SUCCESS" Value="BT_SUCCESS" DisplayName="" Desc="" />
			<enum NativeValue="behaviac::BT_FAILURE" Value="BT_FAILURE" DisplayName="" Desc="" />
			<enum NativeValue="behaviac::BT_RUNNING" Value="BT_RUNNING" DisplayName="" Desc="" />
		</enumtype>
		<enumtype Type="EnumTest" DisplayName="" Desc="">
			<enum NativeValue="EnumTest_One" Value="EnumTest_One" DisplayName="" Desc="" />
			<enum NativeValue="EnumTest_OneAfterOne" Value="EnumTest_OneAfterOne" DisplayName="" Desc="" />
		</enumtype>
		<enumtype Type="FSMAgentTest::EMessage" DisplayName="" Desc="">
			<enum NativeValue="FSMAgentTest::Invalid" Value="Invalid" DisplayName="" Desc="" />
			<enum NativeValue="FSMAgentTest::Begin" Value="Begin" DisplayName="" Desc="" />
			<enum NativeValue="FSMAgentTest::End" Value="End" DisplayName="" Desc="" />
			<enum NativeValue="FSMAgentTest::Pause" Value="Pause" DisplayName="" Desc="" />
			<enum NativeValue="FSMAgentTest::Resume" Value="Resume" DisplayName="" Desc="" />
			<enum NativeValue="FSMAgentTest::Exit" Value="Exit" DisplayName="" Desc="" />
		</enumtype>
		<enumtype Type="TNS::NE::NAT::eColor" DisplayName="色彩枚举" Desc="eColor 是一个用于测试枚举使用的类型">
			<enum NativeValue="TNS::NE::NAT::RED" Value="RED" DisplayName="红色 Red" Desc="Red 是一种非常激进的色彩" />
			<enum NativeValue="TNS::NE::NAT::GREEN" Value="GREEN" DisplayName="" Desc="" />
			<enum NativeValue="TNS::NE::NAT::BLUE" Value="BLUE" DisplayName="" Desc="" />
			<enum NativeValue="TNS::NE::NAT::YELLOW" Value="YELLOW" DisplayName="" Desc="" />
			<enum NativeValue="TNS::NE::NAT::WHITE" Value="WHITE" DisplayName="" Desc="" />
		</enumtype>
		<struct Type="Act" DisplayName="" Desc="" IsRefType="false">
			<Member Name="Var_B_Loop" DisplayName="" Desc="" Type="bool" Class="Act" />
			<Member Name="Var_List_EnumTest" DisplayName="" Desc="" Type="vector&lt;EnumTest&gt;" Class="Act" />
		</struct>
		<struct Type="BSASN::SpatialCoord" DisplayName="" Desc="" IsRefType="false">
			<Member Name="coordX" DisplayName="" Desc="" Type="float" Class="BSASN::SpatialCoord" />
			<Member Name="coordY" DisplayName="" Desc="" Type="float" Class="BSASN::SpatialCoord" />
		</struct>
		<struct Type="BSASN::TransitPlan" DisplayName="" Desc="" IsRefType="false">
			<Member Name="plan_ID" DisplayName="" Desc="" Type="string" Class="BSASN::TransitPlan" />
			<Member Name="plan_selection_precedence" DisplayName="" Desc="" Type="int" Class="BSASN::TransitPlan" />
			<Member Name="transit_points" DisplayName="" Desc="" Type="vector&lt;BSASN::SpatialCoord&gt;" Class="BSASN::TransitPlan" />
		</struct>
		<struct Type="IList" DisplayName="" Desc="" IsRefType="false" />
		<struct Type="System::Object" DisplayName="" Desc="" IsRefType="false" />
		<struct Type="TestClassA" DisplayName="" Desc="" IsRefType="true" />
		<struct Type="TestNamespace::ClassAsValueType" DisplayName="" Desc="" IsRefType="false">
			<Member Name="x" DisplayName="" Desc="" Type="float" Class="TestNamespace::ClassAsValueType" />
			<Member Name="y" DisplayName="" Desc="" Type="float" Class="TestNamespace::ClassAsValueType" />
		</struct>
		<struct Type="TestNamespace::Float2" DisplayName="" Desc="" IsRefType="false">
			<Member Name="x" DisplayName="" Desc="" Type="float" Class="TestNamespace::Float2" />
			<Member Name="y" DisplayName="" Desc="" Type="float" Class="TestNamespace::Float2" />
		</struct>
		<struct Type="TestNS::Float2" DisplayName="" Desc="" IsRefType="false">
			<Member Name="x" DisplayName="" Desc="" Type="float" Class="myFloat2" />
			<Member Name="y" DisplayName="" Desc="" Type="float" Class="myFloat2" />
		</struct>
		<struct Type="TestNS::Node" DisplayName="" Desc="" IsRefType="true">
			<Member Name="name" DisplayName="" Desc="" Type="string" Class="myNode" />
		</struct>
		<struct Type="TNS::ST::kCar" DisplayName="" Desc="" IsRefType="false">
			<Member Name="brand" DisplayName="" Desc="" Type="string" Class="TNS::ST::kCar" />
			<Member Name="price" DisplayName="" Desc="" Type="int" Class="TNS::ST::kCar" />
			<Member Name="color" DisplayName="" Desc="" Type="TNS::NE::NAT::eColor" Class="TNS::ST::kCar" />
		</struct>
		<struct Type="TNS::ST::PER::WRK::kEmployee" DisplayName="" Desc="" IsRefType="false">
			<Member Name="id" DisplayName="" Desc="" Type="int" Class="TNS::ST::PER::WRK::kEmployee" />
			<Member Name="name" DisplayName="" Desc="" Type="string" Class="TNS::ST::PER::WRK::kEmployee" />
			<Member Name="code" DisplayName="" Desc="" Type="char" Class="TNS::ST::PER::WRK::kEmployee" />
			<Member Name="weight" DisplayName="" Desc="" Type="float" Class="TNS::ST::PER::WRK::kEmployee" />
			<Member Name="isMale" DisplayName="" Desc="" Type="bool" Class="TNS::ST::PER::WRK::kEmployee" />
			<Member Name="skinColor" DisplayName="" Desc="" Type="TNS::NE::NAT::eColor" Class="TNS::ST::PER::WRK::kEmployee" />
			<Member Name="car" DisplayName="" Desc="" Type="TNS::ST::kCar" Class="TNS::ST::PER::WRK::kEmployee" />
			<Member Name="boss" DisplayName="" Desc="" Type="behaviac::Agent*" Class="TNS::ST::PER::WRK::kEmployee" />
		</struct>
		<struct Type="UnityEngine::GameObject" DisplayName="" Desc="" IsRefType="true">
			<Member Name="name" DisplayName="" Desc="" Type="string" Class="UnityEngine::GameObject" />
		</struct>
		<struct Type="UnityEngine::Vector3" DisplayName="" Desc="" IsRefType="false">
			<Member Name="x" DisplayName="" Desc="" Type="float" Class="UnityEngine::Vector3" />
			<Member Name="y" DisplayName="" Desc="" Type="float" Class="UnityEngine::Vector3" />
			<Member Name="z" DisplayName="" Desc="" Type="float" Class="UnityEngine::Vector3" />
		</struct>
	</types>
	<agents>
		<agent classfullname="behaviac::Agent" inherited="true" DisplayName="" Desc="" IsRefType="true">
			<Method Name="VectorLength" DisplayName="" Desc="" Class="behaviac::Agent" Static="true" ReturnType="int">
				<Param DisplayName="" Desc="" Type="const IList&amp;" />
			</Method>
			<Method Name="VectorAdd" DisplayName="" Desc="" Class="behaviac::Agent" Static="true" ReturnType="void">
				<Param DisplayName="" Desc="" Type="IList&amp;" />
				<Param DisplayName="" Desc="" Type="const System::Object&amp;" />
			</Method>
			<Method Name="VectorRemove" DisplayName="" Desc="" Class="behaviac::Agent" Static="true" ReturnType="void">
				<Param DisplayName="" Desc="" Type="IList&amp;" />
				<Param DisplayName="" Desc="" Type="const System::Object&amp;" />
			</Method>
			<Method Name="VectorContains" DisplayName="" Desc="" Class="behaviac::Agent" Static="true" ReturnType="bool">
				<Param DisplayName="" Desc="" Type="IList&amp;" />
				<Param DisplayName="" Desc="" Type="const System::Object&amp;" />
			</Method>
			<Method Name="VectorClear" DisplayName="" Desc="" Class="behaviac::Agent" Static="true" ReturnType="void">
				<Param DisplayName="" Desc="" Type="IList&amp;" />
			</Method>
			<Method Name="LogMessage" DisplayName="" Desc="" Class="behaviac::Agent" Static="true" ReturnType="void">
				<Param DisplayName="" Desc="" Type="const char*" />
			</Method>
		</agent>
		<agent classfullname="HTNAgentHouseBase" base="behaviac::Agent" inherited="true" DisplayName="" Desc="" IsRefType="true">
			<Method Name="ObtainPermit" DisplayName="" Desc="" Class="HTNAgentHouseBase" ReturnType="void" />
		</agent>
		<agent classfullname="ParTestAgent" base="ParTestAgentBase" inherited="true" DisplayName="" Desc="" IsRefType="true">
			<Member Name="TV_SHORT_0" DisplayName="1 # TV_SHORT_0" Desc="A" Type="short" Class="ParTestAgent" />
			<Member Name="TV_INT_0" DisplayName="1 # TV_INT_0" Desc="A" Type="int" Class="ParTestAgent" />
			<Member Name="STV_INT_0" DisplayName="1 # STV_INT_0" Desc="A" Type="int" Class="ParTestAgent" Static="true" />
			<Member Name="TV_LONG_0" DisplayName="1 # TV_LONG_0" Desc="A" Type="long" Class="ParTestAgent" />
			<Member Name="TV_USHORT_0" DisplayName="1 # TV_USHORT_0" Desc="A" Type="ushort" Class="ParTestAgent" />
			<Member Name="TV_KEMPLOYEE_0" DisplayName="1 # TV_KEMPLOYEE_0" Desc="A" Type="TNS::ST::PER::WRK::kEmployee" Class="ParTestAgent" />
			<Member Name="STV_KEMPLOYEE_0" DisplayName="1 # STV_KEMPLOYEE_0" Desc="A" Type="TNS::ST::PER::WRK::kEmployee" Class="ParTestAgent" Static="true" />
			<Member Name="TV_LIST_INT_0" DisplayName="1 # TV_LIST_INT_0" Desc="A" Type="vector&lt;int&gt;" Class="ParTestAgent" />
			<Member Name="STV_LIST_INT_0" DisplayName="1 # STV_LIST_INT_0" Desc="A" Type="vector&lt;int&gt;" Class="ParTestAgent" Static="true" />
			<Member Name="TV_LIST_KEMPLOYEE_0" DisplayName="1 # TV_LIST_KEMPLOYEE_0" Desc="A" Type="vector&lt;TNS::ST::PER::WRK::kEmployee&gt;" Class="ParTestAgent" />
			<Member Name="STV_LIST_KEMPLOYEE_0" DisplayName="1 # STV_LIST_KEMPLOYEE_0" Desc="A" Type="vector&lt;TNS::ST::PER::WRK::kEmployee&gt;" Class="ParTestAgent" Static="true" />
			<Method Name="Func_ShortRef" DisplayName="1 # UPR_Short" Desc="A" Class="ParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="short&amp;" />
			</Method>
			<Method Name="Func_IntRef" DisplayName="1 # UPR_Int" Desc="A" Class="ParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="int&amp;" />
			</Method>
			<Method Name="Func_LongRef" DisplayName="1 # UPR_Long" Desc="A" Class="ParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="long&amp;" />
			</Method>
			<Method Name="Func_UShortRef" DisplayName="1 # UPR_UShort" Desc="A" Class="ParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="ushort&amp;" />
			</Method>
			<Method Name="Func_kEmployeeRef" DisplayName="1 # UPR_kEmployee" Desc="A" Class="ParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="TNS::ST::PER::WRK::kEmployee&amp;" />
			</Method>
			<Method Name="Func_IntListRef" DisplayName="1 # UPR_IntList" Desc="A" Class="ParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="vector&lt;int&gt;&amp;" />
			</Method>
			<Method Name="Func_kEmployeeListRef" DisplayName="1 # UPR_kEmployeeList" Desc="A" Class="ParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="vector&lt;TNS::ST::PER::WRK::kEmployee&gt;&amp;" />
			</Method>
			<Method Name="Func_ShortIR" DisplayName="1 # PIR_Short" Desc="A" Class="ParTestAgent" ReturnType="short">
				<Param DisplayName="" Desc="" Type="short" />
			</Method>
			<Method Name="Func_IntIR" DisplayName="1 # PIR_Int" Desc="A" Class="ParTestAgent" ReturnType="int">
				<Param DisplayName="" Desc="" Type="int" />
			</Method>
			<Method Name="Func_LongIR" DisplayName="1 # PIR_Long" Desc="A" Class="ParTestAgent" ReturnType="long">
				<Param DisplayName="" Desc="" Type="long" />
			</Method>
			<Method Name="Func_UShortIR" DisplayName="1 # PIR_UShort" Desc="A" Class="ParTestAgent" ReturnType="ushort">
				<Param DisplayName="" Desc="" Type="ushort" />
			</Method>
			<Method Name="Func_kEmployeeIR" DisplayName="1 # PIR_kEmployee" Desc="A" Class="ParTestAgent" ReturnType="TNS::ST::PER::WRK::kEmployee">
				<Param DisplayName="" Desc="" Type="TNS::ST::PER::WRK::kEmployee" />
			</Method>
			<Method Name="Func_IntListIR" DisplayName="1 # PIR_IntList" Desc="A" Class="ParTestAgent" ReturnType="vector&lt;int&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;int&gt;" />
			</Method>
			<Method Name="Func_kEmployeeListIR" DisplayName="1 # PIR_kEmployeeList" Desc="A" Class="ParTestAgent" ReturnType="vector&lt;TNS::ST::PER::WRK::kEmployee&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;TNS::ST::PER::WRK::kEmployee&gt;" />
			</Method>
			<Method Name="Func_kEmployeeSMF" DisplayName="1 # SMF_kEmployee" Desc="A" Class="ParTestAgent" Static="true" ReturnType="TNS::ST::PER::WRK::kEmployee">
				<Param DisplayName="" Desc="" Type="TNS::ST::PER::WRK::kEmployee" />
			</Method>
			<Method Name="Func_kEmployeeListSMF" DisplayName="1 # SMF_kEmployeeList" Desc="A" Class="ParTestAgent" Static="true" ReturnType="vector&lt;TNS::ST::PER::WRK::kEmployee&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;TNS::ST::PER::WRK::kEmployee&gt;" />
			</Method>
		</agent>
		<agent classfullname="ParTestAgentBase" base="behaviac::Agent" inherited="true" DisplayName="ParTestAgentBase" Desc="测试behaviac::Agent的最底层基类" IsRefType="true">
			<Member Name="TV_ECOLOR_0" DisplayName="0 # TV_ECOLOR_0" Desc="A" Type="TNS::NE::NAT::eColor" Class="ParTestAgentBase" />
			<Member Name="STV_ECOLOR_0" DisplayName="0 # STV_ECOLOR_0" Desc="A" Type="TNS::NE::NAT::eColor" Class="ParTestAgentBase" Static="true" />
			<Member Name="TV_BOOL_0" DisplayName="0 # TV_BOOL_0" Desc="A" Type="bool" Class="ParTestAgentBase" />
			<Member Name="STV_BOOL_0" DisplayName="0 # STV_BOOL_0" Desc="A" Type="bool" Class="ParTestAgentBase" Static="true" />
			<Member Name="TV_CHAR_0" DisplayName="0 # TV_CHAR_0" Desc="A" Type="char" Class="ParTestAgentBase" />
			<Member Name="STV_CHAR_0" DisplayName="0 # STV_CHAR_0" Desc="A" Type="char" Class="ParTestAgentBase" Static="true" />
			<Member Name="TV_BYTE_0" DisplayName="0 # TV_BYTE_0" Desc="A" Type="ubyte" Class="ParTestAgentBase" />
			<Member Name="TV_SBYTE_0" DisplayName="0 # TV_SBYTE_0" Desc="A" Type="sbyte" Class="ParTestAgentBase" />
			<Member Name="TV_LIST_ECOLOR_0" DisplayName="0 # TV_LIST_ECOLOR_0" Desc="A" Type="vector&lt;TNS::NE::NAT::eColor&gt;" Class="ParTestAgentBase" />
			<Member Name="STV_LIST_ECOLOR_0" DisplayName="0 # STV_LIST_ECOLOR_0" Desc="A" Type="vector&lt;TNS::NE::NAT::eColor&gt;" Class="ParTestAgentBase" Static="true" />
			<Member Name="TV_LIST_BOOL_0" DisplayName="0 # TV_LIST_BOOL_0" Desc="A" Type="vector&lt;bool&gt;" Class="ParTestAgentBase" />
			<Member Name="STV_LIST_BOOL_0" DisplayName="0 # STV_LIST_BOOL_0" Desc="A" Type="vector&lt;bool&gt;" Class="ParTestAgentBase" Static="true" />
			<Member Name="TV_LIST_CHAR_0" DisplayName="0 # TV_LIST_CHAR_0" Desc="A" Type="vector&lt;char&gt;" Class="ParTestAgentBase" />
			<Member Name="STV_LIST_CHAR_0" DisplayName="0 # STV_LIST_CHAR_0" Desc="A" Type="vector&lt;char&gt;" Class="ParTestAgentBase" Static="true" />
			<Member Name="TV_LIST_BYTE_0" DisplayName="0 # TV_LIST_BYTE_0" Desc="A" Type="vector&lt;ubyte&gt;" Class="ParTestAgentBase" />
			<Member Name="TV_LIST_SBYTE_0" DisplayName="0 # TV_LIST_SBYTE_0" Desc="A" Type="vector&lt;sbyte&gt;" Class="ParTestAgentBase" />
			<Member Name="STV_LIST_SBYTE_0" DisplayName="0 # STV_LIST_SBYTE_0" Desc="A" Type="vector&lt;sbyte&gt;" Class="ParTestAgentBase" Static="true" />
			<Method Name="Func_eColorRef" DisplayName="0 # UPR_eColor" Desc="A" Class="ParTestAgentBase" ReturnType="void">
				<Param DisplayName="" Desc="" Type="TNS::NE::NAT::eColor&amp;" />
			</Method>
			<Method Name="Func_BooleanRef" DisplayName="0 # UPR_Boolean" Desc="A" Class="ParTestAgentBase" ReturnType="void">
				<Param DisplayName="" Desc="" Type="bool&amp;" />
			</Method>
			<Method Name="Func_CharRef" DisplayName="0 # UPR_Char" Desc="A" Class="ParTestAgentBase" ReturnType="void">
				<Param DisplayName="" Desc="" Type="char&amp;" />
			</Method>
			<Method Name="Func_ByteRef" DisplayName="0 # UPR_Byte" Desc="A" Class="ParTestAgentBase" ReturnType="void">
				<Param DisplayName="" Desc="" Type="ubyte&amp;" />
			</Method>
			<Method Name="Func_SByteRef" DisplayName="0 # UPR_SByte" Desc="A" Class="ParTestAgentBase" ReturnType="void">
				<Param DisplayName="" Desc="" Type="sbyte&amp;" />
			</Method>
			<Method Name="Func_eColorListRef" DisplayName="0 # UPR_eColorList" Desc="A" Class="ParTestAgentBase" ReturnType="void">
				<Param DisplayName="" Desc="" Type="vector&lt;TNS::NE::NAT::eColor&gt;&amp;" />
			</Method>
			<Method Name="Func_BooleanListRef" DisplayName="0 # UPR_BooleanList" Desc="A" Class="ParTestAgentBase" ReturnType="void">
				<Param DisplayName="" Desc="" Type="vector&lt;bool&gt;&amp;" />
			</Method>
			<Method Name="Func_CharListRef" DisplayName="0 # UPR_CharList" Desc="A" Class="ParTestAgentBase" ReturnType="void">
				<Param DisplayName="" Desc="" Type="vector&lt;char&gt;&amp;" />
			</Method>
			<Method Name="Func_ByteListRef" DisplayName="0 # UPR_ByteList" Desc="A" Class="ParTestAgentBase" ReturnType="void">
				<Param DisplayName="" Desc="" Type="vector&lt;ubyte&gt;&amp;" />
			</Method>
			<Method Name="Func_SByteListRef" DisplayName="0 # UPR_SByteList" Desc="A" Class="ParTestAgentBase" ReturnType="void">
				<Param DisplayName="" Desc="" Type="vector&lt;sbyte&gt;&amp;" />
			</Method>
			<Method Name="Func_eColorIR" DisplayName="0 # PIR_eColor" Desc="A" Class="ParTestAgentBase" ReturnType="TNS::NE::NAT::eColor">
				<Param DisplayName="" Desc="" Type="TNS::NE::NAT::eColor" />
			</Method>
			<Method Name="Func_BooleanIR" DisplayName="0 # PIR_Boolean" Desc="A" Class="ParTestAgentBase" ReturnType="bool">
				<Param DisplayName="" Desc="" Type="bool" />
			</Method>
			<Method Name="Func_CharIR" DisplayName="0 # PIR_Char" Desc="A" Class="ParTestAgentBase" ReturnType="char">
				<Param DisplayName="" Desc="" Type="char" />
			</Method>
			<Method Name="Func_ByteIR" DisplayName="0 # PIR_Byte" Desc="A" Class="ParTestAgentBase" ReturnType="ubyte">
				<Param DisplayName="" Desc="" Type="ubyte" />
			</Method>
			<Method Name="Func_SByteIR" DisplayName="0 # PIR_SByte" Desc="A" Class="ParTestAgentBase" ReturnType="sbyte">
				<Param DisplayName="" Desc="" Type="sbyte" />
			</Method>
			<Method Name="Func_eColorListIR" DisplayName="0 # PIR_eColorList" Desc="A" Class="ParTestAgentBase" ReturnType="vector&lt;TNS::NE::NAT::eColor&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;TNS::NE::NAT::eColor&gt;" />
			</Method>
			<Method Name="Func_BooleanListIR" DisplayName="0 # PIR_BooleanList" Desc="A" Class="ParTestAgentBase" ReturnType="vector&lt;bool&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;bool&gt;" />
			</Method>
			<Method Name="Func_CharListIR" DisplayName="0 # PIR_CharList" Desc="A" Class="ParTestAgentBase" ReturnType="vector&lt;char&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;char&gt;" />
			</Method>
			<Method Name="Func_ByteListIR" DisplayName="0 # PIR_ByteList" Desc="A" Class="ParTestAgentBase" ReturnType="vector&lt;ubyte&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;ubyte&gt;" />
			</Method>
			<Method Name="Func_SByteListIR" DisplayName="0 # PIR_SByteList" Desc="A" Class="ParTestAgentBase" ReturnType="vector&lt;sbyte&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;sbyte&gt;" />
			</Method>
			<Method Name="Func_CharSMF" DisplayName="0 # SMF_Char" Desc="A" Class="ParTestAgentBase" Static="true" ReturnType="char">
				<Param DisplayName="" Desc="" Type="char" />
			</Method>
			<Method Name="Func_ByteSMF" DisplayName="0 # SMF_Byte" Desc="A" Class="ParTestAgentBase" Static="true" ReturnType="ubyte">
				<Param DisplayName="" Desc="" Type="ubyte" />
			</Method>
			<Method Name="Func_SByteSMF" DisplayName="0 # SMF_SByte" Desc="A" Class="ParTestAgentBase" Static="true" ReturnType="sbyte">
				<Param DisplayName="" Desc="" Type="sbyte" />
			</Method>
			<Method Name="Func_CharListSMF" DisplayName="0 # SMF_CharList" Desc="A" Class="ParTestAgentBase" Static="true" ReturnType="vector&lt;char&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;char&gt;" />
			</Method>
			<Method Name="Func_SByteListSMF" DisplayName="0 # SMF_SByteList" Desc="A" Class="ParTestAgentBase" Static="true" ReturnType="vector&lt;sbyte&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;sbyte&gt;" />
			</Method>
		</agent>
		<agent classfullname="AgentNodeTest" base="behaviac::Agent" DisplayName="" Desc="" IsRefType="true">
			<Member Name="par_child" DisplayName="" Desc="" Type="ChildNodeTest*" Class="AgentNodeTest" />
			<Member Name="testVar_0" DisplayName="" Desc="" Type="int" Class="AgentNodeTest" />
			<Member Name="testVar_1" DisplayName="testVar_1" Desc="testVar_1 property" Type="int" Class="AgentNodeTest" />
			<Member Name="testVar_2" DisplayName="" Desc="" Type="float" Class="AgentNodeTest" />
			<Member Name="testVar_3" DisplayName="" Desc="" Type="float" Class="AgentNodeTest" />
			<Member Name="waiting_timeout_interval" DisplayName="" Desc="" Type="int" Class="AgentNodeTest" />
			<Member Name="testVar_str_0" DisplayName="" Desc="" Type="string" Class="AgentNodeTest" />
			<Member Name="testColor" DisplayName="" Desc="" Type="EnumTest" Class="AgentNodeTest" />
			<Member Name="testVar_Act" DisplayName="" Desc="" Type="Act" Class="AgentNodeTest" />
			<Method Name="setEventVarInt" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="int" />
			</Method>
			<Method Name="setEventVarBool" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="bool" />
			</Method>
			<Method Name="setEventVarFloat" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="float" />
			</Method>
			<Method Name="setEventVarAgent" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="AgentNodeTest*" />
			</Method>
			<Method Name="getConstOne" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="int" />
			<Method Name="getConstThousand" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="int">
				<Param DisplayName="" Desc="" Type="int" />
				<Param DisplayName="" Desc="" Type="int" />
			</Method>
			<Method Name="setTestVar_0" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="int" />
			</Method>
			<Method Name="setTestVar_1" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="int" />
			</Method>
			<Method Name="setTestVar_2" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="float" />
			</Method>
			<Method Name="setTestVar_0_2" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="int" />
				<Param DisplayName="" Desc="" Type="float" />
			</Method>
			<Method Name="setTestVar_R" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="float" />
			<Method Name="setTestVar_3" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="float" />
			</Method>
			<Method Name="enter_action_0" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="bool" />
			<Method Name="exit_action_0" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void" />
			<Method Name="enter_action_1" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="bool">
				<Param DisplayName="" Desc="" Type="float" />
			</Method>
			<Method Name="exit_action_1" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="float" />
			</Method>
			<Method Name="enter_action_2" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="bool">
				<Param DisplayName="" Desc="" Type="int" />
				<Param DisplayName="" Desc="" Type="string" />
			</Method>
			<Method Name="exit_action_2" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="int" />
				<Param DisplayName="" Desc="" Type="string" />
			</Method>
			<Method Name="createGameObject" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="UnityEngine::GameObject*" />
			<Method Name="testGameObject" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="UnityEngine::GameObject*" />
			</Method>
			<Method Name="createExtendedNode" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="TestNS::Node*" />
			<Method Name="testExtendedRefType" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="TestNS::Node*" />
			</Method>
			<Method Name="testExtendedStruct" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="TestNS::Float2&amp;" />
			</Method>
			<Method Name="getExtendedStruct" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="TestNS::Float2&amp;" />
			<Method Name="getConstExtendedStruct" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="const TestNS::Float2&amp;" />
			<Method Name="return_status" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="behaviac::EBTStatus">
				<Param DisplayName="" Desc="" Type="const TestNS::Float2&amp;" />
			</Method>
			<Method Name="TestFunC" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="TestClassA*" />
			<Method Name="TestFuncD" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="behaviac::EBTStatus">
				<Param DisplayName="" Desc="" Type="TestClassA*" />
			</Method>
			<Method Name="switchRef" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="behaviac::EBTStatus">
				<Param DisplayName="" Desc="" Type="const string&amp;" />
			</Method>
			<Method Name="Stop" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void" />
			<Method Name="SelectTarget" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void" />
			<Method Name="IsTargetValid" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="bool" />
			<Method Name="CanSeeEnemy" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="bool" />
			<Method Name="Move" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="behaviac::EBTStatus" />
			<Method Name="MoveToTarget" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="behaviac::EBTStatus" />
			<Method Name="GetRefTree" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="const char*" />
			<Method Name="initChildAgent" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void" />
			<Method Name="initChildAgentTest" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void" />
			<Method Name="testVectorStruct" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="const vector&lt;TestNS::Float2&gt;&amp;" />
			</Method>
			<Method Name="transitPlanTactics" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="BSASN::TransitPlan" />
				<Param DisplayName="" Desc="" Type="EnumTest" />
				<Param DisplayName="" Desc="" Type="const string&amp;" />
			</Method>
			<Method Name="testString" DisplayName="" Desc="" Class="AgentNodeTest" ReturnType="void">
				<Param DisplayName="" Desc="" Type="string" />
			</Method>
		</agent>
		<agent classfullname="ChildNodeTest" base="AgentNodeTest" DisplayName="" Desc="" IsRefType="true">
			<Method Name="GetConstFloatValue" DisplayName="" Desc="" Class="ChildNodeTest" ReturnType="float" />
			<Method Name="GetConstDoubleValue" DisplayName="" Desc="" Class="ChildNodeTest" ReturnType="double" />
		</agent>
		<agent classfullname="ChildNodeTestSub" base="ChildNodeTest" DisplayName="" Desc="" IsRefType="true">
			<Member Name="IntValue" DisplayName="" Desc="" Type="int" Class="ChildNodeTestSub" />
			<Method Name="GetConstFloatValueSub" DisplayName="" Desc="" Class="ChildNodeTestSub" ReturnType="float" />
		</agent>
		<agent classfullname="CustomPropertyAgent" base="behaviac::Agent" DisplayName="" Desc="" IsRefType="true">
			<Member Name="IntProperty" DisplayName="" Desc="" Type="int" Class="CustomPropertyAgent" />
			<Member Name="FloatPropertyReadonly" DisplayName="" Desc="" Type="float" Class="CustomPropertyAgent" />
			<Member Name="BoolMemberReadonly" DisplayName="" Desc="" Type="bool" Class="CustomPropertyAgent" />
			<Member Name="IntMemberConst" DisplayName="" Desc="" Type="int" Class="CustomPropertyAgent" Static="true" />
			<Member Name="StringMemberReadonly" DisplayName="" Desc="" Type="string" Class="CustomPropertyAgent" />
			<Member Name="Location" DisplayName="" Desc="" Type="UnityEngine::Vector3" Class="CustomPropertyAgent" />
			<Method Name="FnWithOutParam" DisplayName="" Desc="" Class="CustomPropertyAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="int&amp;" />
			</Method>
			<Method Name="TestFn1" DisplayName="" Desc="" Class="CustomPropertyAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="const TestNamespace::Float2&amp;" />
			</Method>
			<Method Name="TestFn2" DisplayName="" Desc="" Class="CustomPropertyAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="TestNamespace::ClassAsValueType*" />
			</Method>
		</agent>
		<agent classfullname="EmployeeParTestAgent" base="ParTestAgent" DisplayName="" Desc="" IsRefType="true">
			<Member Name="TV_UINT_0" DisplayName="2 # TV_UINT_0" Desc="A" Type="uint" Class="EmployeeParTestAgent" />
			<Member Name="TV_ULONG_0" DisplayName="2 # TV_ULONG_0" Desc="A" Type="ulong" Class="EmployeeParTestAgent" />
			<Member Name="TV_LL_0" DisplayName="2 # TV_LL_0" Desc="A" Type="llong" Class="EmployeeParTestAgent" />
			<Member Name="TV_ULL_0" DisplayName="2 # TV_ULL_0" Desc="A" Type="ullong" Class="EmployeeParTestAgent" />
			<Member Name="TV_F_0" DisplayName="2 # TV_F_0" Desc="A" Type="float" Class="EmployeeParTestAgent" />
			<Member Name="STV_F_0" DisplayName="2 # STV_F_0" Desc="A" Type="float" Class="EmployeeParTestAgent" Static="true" />
			<Member Name="TV_D_0" DisplayName="2 # TV_D_0" Desc="A" Type="double" Class="EmployeeParTestAgent" />
			<Member Name="TV_STR_0" DisplayName="2 # TV_STR_0" Desc="A" Type="string" Class="EmployeeParTestAgent" />
			<Member Name="TV_CSZSTR_0" DisplayName="2 # TV_CSZSTR_0" Desc="A" Type="const char*" Class="EmployeeParTestAgent" Readonly="true" />
			<Member Name="TV_SZSTR_0" DisplayName="2 # TV_SZSTR_0" Desc="A" Type="char*" Class="EmployeeParTestAgent" />
			<Member Name="STV_STR_0" DisplayName="2 # STV_STR_0" Desc="A" Type="string" Class="EmployeeParTestAgent" Static="true" />
			<Member Name="TV_AGENT_0" DisplayName="2 # TV_AGENT_0" Desc="A" Type="behaviac::Agent*" Class="EmployeeParTestAgent" />
			<Member Name="STV_AGENT_0" DisplayName="2 # STV_AGENT_0" Desc="A" Type="behaviac::Agent*" Class="EmployeeParTestAgent" Static="true" />
			<Member Name="TV_LIST_F_0" DisplayName="2 # TV_LIST_F_0" Desc="A" Type="vector&lt;float&gt;" Class="EmployeeParTestAgent" />
			<Member Name="STV_LIST_F_0" DisplayName="2 # STV_LIST_F_0" Desc="A" Type="vector&lt;float&gt;" Class="EmployeeParTestAgent" Static="true" />
			<Member Name="TV_LIST_STR_0" DisplayName="2 # TV_LIST_STR_0" Desc="A" Type="vector&lt;string&gt;" Class="EmployeeParTestAgent" />
			<Member Name="STV_LIST_STR_0" DisplayName="2 # STV_LIST_STR_0" Desc="A" Type="vector&lt;string&gt;" Class="EmployeeParTestAgent" Static="true" />
			<Member Name="TV_LIST_AGENT_0" DisplayName="2 # TV_LIST_AGENT_0" Desc="A" Type="vector&lt;behaviac::Agent*&gt;" Class="EmployeeParTestAgent" />
			<Member Name="STV_LIST_AGENT_0" DisplayName="2 # STV_LIST_AGENT_0" Desc="A" Type="vector&lt;behaviac::Agent*&gt;" Class="EmployeeParTestAgent" Static="true" />
			<Method Name="Func_UIntRef" DisplayName="2 # UPR_UIntRef" Desc="A" Class="EmployeeParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="uint&amp;" />
			</Method>
			<Method Name="Func_ULongRef" DisplayName="2 # UPR_ULongRef" Desc="A" Class="EmployeeParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="ulong&amp;" />
			</Method>
			<Method Name="Func_SingleRef" DisplayName="2 # UPR_SingleRef" Desc="A" Class="EmployeeParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="float&amp;" />
			</Method>
			<Method Name="Func_DoubleRef" DisplayName="2 # UPR_DoubleRef" Desc="A" Class="EmployeeParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="double&amp;" />
			</Method>
			<Method Name="Func_LongLongRef" DisplayName="2 # UPR_LongLongRef" Desc="A" Class="EmployeeParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="llong&amp;" />
			</Method>
			<Method Name="Func_ULongLongRef" DisplayName="2 # UPR_ULongLongRef" Desc="A" Class="EmployeeParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="ullong&amp;" />
			</Method>
			<Method Name="Func_StringRef" DisplayName="2 # UPR_StringRef" Desc="A" Class="EmployeeParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="string&amp;" />
			</Method>
			<Method Name="Func_SzStringRef" DisplayName="2 # UPR_SzStringRef" Desc="A" Class="EmployeeParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="char*&amp;" />
			</Method>
			<Method Name="Func_CSzStringRef" DisplayName="2 # UPR_CSzStringRef" Desc="A" Class="EmployeeParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="const char*" />
			</Method>
			<Method Name="Func_AgentRef" DisplayName="2 # UPR_AgentRef" Desc="A" Class="EmployeeParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="behaviac::Agent*&amp;" />
			</Method>
			<Method Name="Func_SingleListRef" DisplayName="2 # UPR_SingleListRef" Desc="A" Class="EmployeeParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="vector&lt;float&gt;&amp;" />
			</Method>
			<Method Name="Func_StringListRef" DisplayName="2 # UPR_StringListRef" Desc="A" Class="EmployeeParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="vector&lt;string&gt;&amp;" />
			</Method>
			<Method Name="Func_AgentListRef" DisplayName="2 # UPR_AgentListRef" Desc="A" Class="EmployeeParTestAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="vector&lt;behaviac::Agent*&gt;&amp;" />
			</Method>
			<Method Name="Func_UIntIR" DisplayName="2 # PIR_UIntIR" Desc="A" Class="EmployeeParTestAgent" ReturnType="uint">
				<Param DisplayName="" Desc="" Type="uint" />
			</Method>
			<Method Name="Func_ULongIR" DisplayName="2 # PIR_ULongIR" Desc="A" Class="EmployeeParTestAgent" ReturnType="ulong">
				<Param DisplayName="" Desc="" Type="ulong" />
			</Method>
			<Method Name="Func_SingleIR" DisplayName="2 # PIR_SingleIR" Desc="A" Class="EmployeeParTestAgent" ReturnType="float">
				<Param DisplayName="" Desc="" Type="float" />
			</Method>
			<Method Name="Func_DoubleIR" DisplayName="2 # PIR_DoubleIR" Desc="A" Class="EmployeeParTestAgent" ReturnType="double">
				<Param DisplayName="" Desc="" Type="double" />
			</Method>
			<Method Name="Func_LongLongIR" DisplayName="2 # PIR_LongLongIR" Desc="A" Class="EmployeeParTestAgent" ReturnType="llong">
				<Param DisplayName="" Desc="" Type="llong" />
			</Method>
			<Method Name="Func_ULongLongIR" DisplayName="2 # PIR_ULongLongIR" Desc="A" Class="EmployeeParTestAgent" ReturnType="ullong">
				<Param DisplayName="" Desc="" Type="ullong" />
			</Method>
			<Method Name="Func_StringIR" DisplayName="2 # PIR_StringIR" Desc="A" Class="EmployeeParTestAgent" ReturnType="string">
				<Param DisplayName="" Desc="" Type="const string&amp;" />
			</Method>
			<Method Name="Func_SzStringIR" DisplayName="2 # PIR_SzStringIR" Desc="A" Class="EmployeeParTestAgent" ReturnType="char*">
				<Param DisplayName="" Desc="" Type="char*" />
			</Method>
			<Method Name="Func_CSzStringIR" DisplayName="2 # PIR_CSzStringIR" Desc="A" Class="EmployeeParTestAgent" ReturnType="const char*">
				<Param DisplayName="" Desc="" Type="const char*" />
			</Method>
			<Method Name="Func_AgentIR" DisplayName="2 # PIR_AgentIR" Desc="A" Class="EmployeeParTestAgent" ReturnType="behaviac::Agent*">
				<Param DisplayName="" Desc="" Type="behaviac::Agent*" />
			</Method>
			<Method Name="Func_ParTestAgentBaseIR" DisplayName="2 # PIR_ParTestAgentBaseIR" Desc="A" Class="EmployeeParTestAgent" ReturnType="ParTestAgentBase*">
				<Param DisplayName="" Desc="" Type="ParTestAgentBase*" />
			</Method>
			<Method Name="Func_SingleListIR" DisplayName="2 # PIR_SingleListIR" Desc="A" Class="EmployeeParTestAgent" ReturnType="vector&lt;float&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;float&gt;" />
			</Method>
			<Method Name="Func_StringListIR" DisplayName="2 # PIR_StringListIR" Desc="A" Class="EmployeeParTestAgent" ReturnType="vector&lt;string&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;string&gt;" />
			</Method>
			<Method Name="Func_AgentListIR" DisplayName="2 # PIR_AgentListIR" Desc="A" Class="EmployeeParTestAgent" ReturnType="vector&lt;behaviac::Agent*&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;behaviac::Agent*&gt;" />
			</Method>
			<Method Name="Func_ParTestAgentBaseListIR" DisplayName="2 # PIR_ParTestAgentBaseListIR" Desc="A" Class="EmployeeParTestAgent" ReturnType="vector&lt;ParTestAgentBase*&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;ParTestAgentBase*&gt;" />
			</Method>
			<Method Name="Func_ULongSMF" DisplayName="2 # SMF_ULongSMF" Desc="A" Class="EmployeeParTestAgent" Static="true" ReturnType="ulong">
				<Param DisplayName="" Desc="" Type="ulong" />
			</Method>
			<Method Name="Func_StringSMF" DisplayName="2 # SMF_StringSMF" Desc="A" Class="EmployeeParTestAgent" Static="true" ReturnType="string">
				<Param DisplayName="" Desc="" Type="const string&amp;" />
			</Method>
			<Method Name="Func_StringListSMF" DisplayName="2 # SMF_StringListSMF" Desc="A" Class="EmployeeParTestAgent" Static="true" ReturnType="vector&lt;string&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;string&gt;" />
			</Method>
			<Method Name="Func_AgentSMF" DisplayName="2 # SMF_AgentSMF" Desc="A" Class="EmployeeParTestAgent" Static="true" ReturnType="behaviac::Agent*">
				<Param DisplayName="" Desc="" Type="behaviac::Agent*" />
			</Method>
			<Method Name="Func_AgentListSMF" DisplayName="2 # SMF_AgentListSMF" Desc="A" Class="EmployeeParTestAgent" Static="true" ReturnType="vector&lt;behaviac::Agent*&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;behaviac::Agent*&gt;" />
			</Method>
		</agent>
		<agent classfullname="FSMAgentTest" base="behaviac::Agent" DisplayName="" Desc="" IsRefType="true">
			<Member Name="Message" DisplayName="" Desc="" Type="FSMAgentTest::EMessage" Class="FSMAgentTest" />
			<Method Name="inactive_update" DisplayName="" Desc="" Class="FSMAgentTest" ReturnType="void" />
			<Method Name="active_update" DisplayName="" Desc="" Class="FSMAgentTest" ReturnType="void" />
			<Method Name="pause_update" DisplayName="" Desc="" Class="FSMAgentTest" ReturnType="void" />
			<Method Name="exit_update" DisplayName="" Desc="" Class="FSMAgentTest" ReturnType="void" />
		</agent>
		<agent classfullname="HTNAgentHouse" base="HTNAgentHouseBase" DisplayName="" Desc="" IsRefType="true">
			<Method Name="HireBuilder" DisplayName="" Desc="" Class="HTNAgentHouse" ReturnType="void" />
			<Method Name="PayBuilder" DisplayName="" Desc="" Class="HTNAgentHouse" ReturnType="void" />
			<Method Name="BuildFoundation" DisplayName="" Desc="" Class="HTNAgentHouse" ReturnType="void" />
			<Method Name="BuildFrame" DisplayName="" Desc="" Class="HTNAgentHouse" ReturnType="void" />
			<Method Name="BuildRoof" DisplayName="" Desc="" Class="HTNAgentHouse" ReturnType="void" />
			<Method Name="BuildWalls" DisplayName="" Desc="" Class="HTNAgentHouse" ReturnType="void" />
			<Method Name="BuildInterior" DisplayName="" Desc="" Class="HTNAgentHouse" ReturnType="void" />
			<Method Name="CutLogs" DisplayName="" Desc="" Class="HTNAgentHouse" ReturnType="void" />
			<Method Name="GetFriend" DisplayName="" Desc="" Class="HTNAgentHouse" ReturnType="void" />
			<Method Name="BuyLand" DisplayName="" Desc="" Class="HTNAgentHouse" ReturnType="void" />
			<Method Name="GetLoan" DisplayName="" Desc="" Class="HTNAgentHouse" ReturnType="void" />
		</agent>
		<agent classfullname="HTNAgentTravel" base="behaviac::Agent" DisplayName="" Desc="" IsRefType="true">
			<Method Name="ride_taxi" DisplayName="" Desc="" Class="HTNAgentTravel" ReturnType="void">
				<Param DisplayName="" Desc="" Type="int" />
				<Param DisplayName="" Desc="" Type="int" />
			</Method>
			<Method Name="fly" DisplayName="" Desc="" Class="HTNAgentTravel" ReturnType="void">
				<Param DisplayName="" Desc="" Type="int" />
				<Param DisplayName="" Desc="" Type="int" />
			</Method>
			<Method Name="exist_start" DisplayName="" Desc="" Class="HTNAgentTravel" ReturnType="bool">
				<Param DisplayName="" Desc="" Type="int&amp;" />
			</Method>
			<Method Name="exist_finish" DisplayName="" Desc="" Class="HTNAgentTravel" ReturnType="bool">
				<Param DisplayName="" Desc="" Type="int&amp;" />
			</Method>
			<Method Name="short_distance" DisplayName="" Desc="" Class="HTNAgentTravel" ReturnType="bool">
				<Param DisplayName="" Desc="" Type="int" />
				<Param DisplayName="" Desc="" Type="int" />
			</Method>
			<Method Name="long_distance" DisplayName="" Desc="" Class="HTNAgentTravel" ReturnType="bool">
				<Param DisplayName="" Desc="" Type="int" />
				<Param DisplayName="" Desc="" Type="int" />
			</Method>
			<Method Name="exist_airport" DisplayName="" Desc="" Class="HTNAgentTravel" ReturnType="bool">
				<Param DisplayName="" Desc="" Type="int" />
				<Param DisplayName="" Desc="" Type="int&amp;" />
			</Method>
			<Method Name="exist_airports" DisplayName="" Desc="" Class="HTNAgentTravel" ReturnType="bool">
				<Param DisplayName="" Desc="" Type="int" />
				<Param DisplayName="" Desc="" Type="vector&lt;int&gt;&amp;" />
			</Method>
		</agent>
		<agent classfullname="ParTestRegNameAgent" base="behaviac::Agent" DisplayName="" Desc="" IsRefType="true">
			<Member Name="TV_CHAR_0" DisplayName="3 # TV_CHAR_0" Desc="A" Type="char" Class="ParTestRegNameAgent" />
			<Member Name="TV_BYTE_0" DisplayName="3 # TV_BYTE_0" Desc="A" Type="ubyte" Class="ParTestRegNameAgent" />
			<Member Name="TV_SBYTE_0" DisplayName="3 # TV_SBYTE_0" Desc="A" Type="sbyte" Class="ParTestRegNameAgent" />
			<Member Name="TV_STR_0" DisplayName="3 # TV_STR_0" Desc="A" Type="string" Class="ParTestRegNameAgent" />
			<Member Name="TV_AGENT_0" DisplayName="3 # TV_AGENT_0" Desc="A" Type="behaviac::Agent*" Class="ParTestRegNameAgent" />
			<Member Name="TV_KEMPLOYEE_0" DisplayName="3 # TV_KEMPLOYEE_0" Desc="A" Type="TNS::ST::PER::WRK::kEmployee" Class="ParTestRegNameAgent" />
			<Member Name="STV_KEMPLOYEE_0" DisplayName="3 # STV_KEMPLOYEE_0" Desc="A" Type="TNS::ST::PER::WRK::kEmployee" Class="ParTestRegNameAgent" Static="true" />
			<Member Name="TV_LIST_KEMPLOYEE_0" DisplayName="3 # TV_LIST_KEMPLOYEE_0" Desc="A" Type="vector&lt;TNS::ST::PER::WRK::kEmployee&gt;" Class="ParTestRegNameAgent" />
			<Member Name="STV_LIST_SBYTE_0" DisplayName="3 # STV_LIST_SBYTE_0" Desc="A" Type="vector&lt;sbyte&gt;" Class="ParTestRegNameAgent" Static="true" />
			<Member Name="STV_LIST_KEMPLOYEE_0" DisplayName="3 # STV_LIST_KEMPLOYEE_0" Desc="A" Type="vector&lt;TNS::ST::PER::WRK::kEmployee&gt;" Class="ParTestRegNameAgent" Static="true" />
			<Method Name="Func_CharIR" DisplayName="3 # PIR_Char" Desc="A" Class="ParTestRegNameAgent" ReturnType="char">
				<Param DisplayName="" Desc="" Type="char" />
			</Method>
			<Method Name="Func_ByteIR" DisplayName="3 # PIR_Byte" Desc="A" Class="ParTestRegNameAgent" ReturnType="ubyte">
				<Param DisplayName="" Desc="" Type="ubyte" />
			</Method>
			<Method Name="Func_SByteIR" DisplayName="3 # PIR_SByte" Desc="A" Class="ParTestRegNameAgent" ReturnType="sbyte">
				<Param DisplayName="" Desc="" Type="sbyte" />
			</Method>
			<Method Name="Func_StringIR" DisplayName="3 # PIR_String" Desc="A" Class="ParTestRegNameAgent" ReturnType="string">
				<Param DisplayName="" Desc="" Type="string" />
			</Method>
			<Method Name="Func_AgentIR" DisplayName="3 # PIR_Agent" Desc="A" Class="ParTestRegNameAgent" ReturnType="behaviac::Agent*">
				<Param DisplayName="" Desc="" Type="behaviac::Agent*" />
			</Method>
			<Method Name="Func_kEmployeeIR" DisplayName="3 # PIR_kEmployee" Desc="A" Class="ParTestRegNameAgent" ReturnType="TNS::ST::PER::WRK::kEmployee">
				<Param DisplayName="" Desc="" Type="TNS::ST::PER::WRK::kEmployee" />
			</Method>
			<Method Name="Func_SByteListIR" DisplayName="3 # PIR_SByteList" Desc="A" Class="ParTestRegNameAgent" ReturnType="vector&lt;sbyte&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;sbyte&gt;" />
			</Method>
			<Method Name="Func_kEmployeeListIR" DisplayName="3 # PIR_kEmployeeList" Desc="A" Class="ParTestRegNameAgent" ReturnType="vector&lt;TNS::ST::PER::WRK::kEmployee&gt;">
				<Param DisplayName="" Desc="" Type="vector&lt;TNS::ST::PER::WRK::kEmployee&gt;" />
			</Method>
		</agent>
		<agent classfullname="PreconEffectorAgent" base="behaviac::Agent" DisplayName="" Desc="" IsRefType="true">
			<Member Name="count_success" DisplayName="" Desc="" Type="int" Class="PreconEffectorAgent" />
			<Member Name="count_failure" DisplayName="" Desc="" Type="int" Class="PreconEffectorAgent" />
			<Member Name="count_both" DisplayName="" Desc="" Type="int" Class="PreconEffectorAgent" />
			<Member Name="ret" DisplayName="" Desc="" Type="int" Class="PreconEffectorAgent" />
			<Method Name="fn_return" DisplayName="" Desc="" Class="PreconEffectorAgent" ReturnType="int" />
			<Method Name="action" DisplayName="" Desc="" Class="PreconEffectorAgent" ReturnType="void" />
		</agent>
		<agent classfullname="PropertyReadonlyAgent" base="behaviac::Agent" DisplayName="" Desc="" IsRefType="true">
			<Member Name="PropertyGetterSetter" DisplayName="" Desc="" Type="int" Class="PropertyReadonlyAgent" />
			<Member Name="PropertyGetterOnly" DisplayName="" Desc="" Type="int" Class="PropertyReadonlyAgent" />
			<Member Name="StaticPropertyGetterSetter" DisplayName="" Desc="" Type="float" Class="PropertyReadonlyAgent" Static="true" />
			<Member Name="MemberReadonly" DisplayName="" Desc="" Type="const int" Class="PropertyReadonlyAgent" Readonly="true" />
			<Member Name="MemberReadonlyAs" DisplayName="" Desc="" Type="int" Class="PropertyReadonlyAgent" Readonly="true" />
			<Method Name="FnWithOutParam" DisplayName="" Desc="" Class="PropertyReadonlyAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="int&amp;" />
			</Method>
			<Method Name="PassInProperty" DisplayName="" Desc="" Class="PropertyReadonlyAgent" ReturnType="void">
				<Param DisplayName="" Desc="" Type="int" />
			</Method>
		</agent>
		<agent classfullname="StaticAgent" base="behaviac::Agent" DisplayName="" Desc="" IsRefType="true">
			<Member Name="sInt" DisplayName="" Desc="" Type="int" Class="StaticAgent" Static="true" />
			<Method Name="sAction" DisplayName="" Desc="" Class="StaticAgent" Static="true" ReturnType="void" />
		</agent>
		<agent classfullname="TestNS::AgentArrayAccessTest" base="behaviac::Agent" DisplayName="" Desc="" IsRefType="true">
			<Member Name="ListInts" DisplayName="" Desc="" Type="vector&lt;int&gt;" Class="TestNS::AgentArrayAccessTest" />
			<Member Name="Int" DisplayName="" Desc="" Type="int" Class="TestNS::AgentArrayAccessTest" />
		</agent>
	</agents>
	<instances>
		<instance name="ParTestRegNameAgent" class="ParTestRegNameAgent" DisplayName="ParTestRegNameAgent" Desc="ParTestRegNameAgent" />
		<instance name="StaticAgent" class="StaticAgent" DisplayName="StaticAgent" Desc="StaticAgent" />
	</instances>
</metas>
